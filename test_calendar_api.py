"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Apps Script Calendar API
–ó–∞–ø—É—Å—Ç–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö endpoint'–æ–≤
"""

import requests
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional

class CalendarAPITester:
    def __init__(self):
        self.base_url = "https://script.google.com/macros/s/AKfycbx3xhE0H1souiNBEwryNL6S4UDk_YKkC6LfoGqwDndnAjFYTzSaK-AUVAZgVjfUtOCGAQ/exec"
        self.test_results = []
    
    def test_endpoint(self, name: str, params: Dict = None) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç endpoint –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        print(f"\n{'='*50}")
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º: {name}")
        print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params or '–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤'}")
        print('-'*50)
        
        try:
            response = requests.get(self.base_url, params=params, timeout=30)
            response.raise_for_status()
            data = response.json()
            
            # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ!")
            print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç:")
            print(json.dumps(data, indent=2, ensure_ascii=False)[:500])  # –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
            
            if 'events' in data:
                print(f"\n–ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {len(data['events'])}")
                if data['events']:
                    print(f"–ü–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: {data['events'][0].get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            
            self.test_results.append({
                'test': name,
                'success': True,
                'events_count': len(data.get('events', []))
            })
            
            return data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.test_results.append({
                'test': name,
                'success': False,
                'error': str(e)
            })
            return {}
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Calendar API")
        print(f"URL: {self.base_url}")
        
        # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –∑–∞ 24 —á–∞—Å–∞)
        self.test_endpoint("–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
        
        # –¢–µ—Å—Ç 2: –í—Å—Ç—Ä–µ—á–∏ –Ω–∞ 48 —á–∞—Å–æ–≤
        self.test_endpoint("–í—Å—Ç—Ä–µ—á–∏ –Ω–∞ 48 —á–∞—Å–æ–≤", {'hours': 48})
        
        # –¢–µ—Å—Ç 3: –¢–æ–ª—å–∫–æ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –≤—Å—Ç—Ä–µ—á–∏
        self.test_endpoint("–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –≤—Å—Ç—Ä–µ—á–∏", {'action': 'recurring'})
        
        # –¢–µ—Å—Ç 4: –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º
        all_data = self.test_endpoint("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º", {'action': 'all'})
        
        # –¢–µ—Å—Ç 5: –ü–æ–∏—Å–∫ —Å–µ—Ä–∏–∏ –≤—Å—Ç—Ä–µ—á (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è)
        if all_data and 'patterns' in all_data:
            # –ò—â–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å–µ—Ä–∏—é
            for pattern_type, meetings in all_data['patterns'].items():
                if meetings:
                    series_name = meetings[0].split()[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
                    self.test_endpoint(
                        f"–ò—Å—Ç–æ—Ä–∏—è —Å–µ—Ä–∏–∏ '{series_name}'", 
                        {'action': 'series', 'seriesName': series_name}
                    )
                    break
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_summary()
    
    def check_meetings_in_next_30_minutes(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å—Ç—Ä–µ—á–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –º–∏–Ω—É—Ç"""
        print(f"\n{'='*50}")
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å—Ç—Ä–µ—á –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –º–∏–Ω—É—Ç")
        print('-'*50)
        
        try:
            response = requests.get(self.base_url, params={'hours': 1}, timeout=30)
            response.raise_for_status()
            data = response.json()
            
            if 'events' in data:
                now = datetime.now()
                soon = now + timedelta(minutes=30)
                
                upcoming_soon = []
                for event in data['events']:
                    try:
                        start_time = datetime.fromisoformat(event['startTime'].replace('Z', '+00:00'))
                        if now <= start_time <= soon:
                            upcoming_soon.append(event)
                    except (KeyError, ValueError) as e:
                        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
                        continue
                
                if upcoming_soon:
                    print(f"‚è∞ –ù–∞–π–¥–µ–Ω–æ {len(upcoming_soon)} –≤—Å—Ç—Ä–µ—á –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –º–∏–Ω—É—Ç:")
                    for event in upcoming_soon:
                        print(f"  - {event['title']} –≤ {event['startTime']}")
                else:
                    print("–ù–µ—Ç –≤—Å—Ç—Ä–µ—á –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –º–∏–Ω—É—Ç")
                
                return upcoming_soon
            else:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∏–∑ API")
                return []
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Å—Ç—Ä–µ—á: {e}")
            return []
    
    def find_recurring_patterns(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –≤—Å—Ç—Ä–µ—á"""
        print(f"\n{'='*50}")
        print("üìä –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤—Å—Ç—Ä–µ—á")
        print('-'*50)
        
        try:
            response = requests.get(self.base_url, params={'action': 'recurring'}, timeout=30)
            response.raise_for_status()
            data = response.json()
            
            if 'series' in data:
                print(f"–ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä–∏–π –≤—Å—Ç—Ä–µ—á: {len(data['series'])}")
                for series_name, meetings in data['series'].items():
                    print(f"\nüìå –°–µ—Ä–∏—è: {series_name}")
                    print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(meetings)}")
                    if meetings:
                        print(f"   –°–ª–µ–¥—É—é—â–∞—è: {meetings[0].get('startTime', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            return data.get('series', {})
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
            return {}
    
    def print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        print(f"\n{'='*50}")
        print("üìà –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print('='*50)
        
        successful = sum(1 for r in self.test_results if r['success'])
        failed = len(self.test_results) - successful
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {failed}")
        
        print("\n–î–µ—Ç–∞–ª–∏:")
        for result in self.test_results:
            status = "‚úÖ" if result['success'] else "‚ùå"
            print(f"{status} {result['test']}")
            if result['success'] and 'events_count' in result:
                print(f"   –°–æ–±—ã—Ç–∏—è: {result['events_count']}")
            elif not result['success']:
                print(f"   –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if __name__ == "__main__":
    tester = CalendarAPITester()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    tester.run_all_tests()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    tester.check_meetings_in_next_30_minutes()
    tester.find_recurring_patterns()
    
    print("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")