"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Calendar —á–µ—Ä–µ–∑ Apps Script API
–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –º–æ–¥—É–ª—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ
"""

import requests
from datetime import datetime, timedelta, timezone
from typing import Dict, List, Optional
import logging
import re
import asyncio
import aiohttp

logger = logging.getLogger(__name__)

class GoogleCalendarClient:
    def __init__(self):
        self.api_url = "https://script.google.com/macros/s/AKfycbx3xhE0H1souiNBEwryNL6S4UDk_YKkC6LfoGqwDndnAjFYTzSaK-AUVAZgVjfUtOCGAQ/exec"
        self.connection_ok = self._test_connection()
    
    def _test_connection(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        try:
            response = requests.get(self.api_url, params={'hours': 1}, timeout=10)
            response.raise_for_status()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç –ª–∏ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if 'Sign in - Google Accounts' in response.text or 'accounts/AccountChooser' in response.text:
                logger.error("‚ùå Google Apps Script —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –ø—É–±–ª–∏—á–Ω—ã–º –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.")
                logger.error("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –≤ Google Apps Script, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Deploy > Manage deployments > Edit > Execute as: Me, Who has access: Anyone")
                return False
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
            try:
                data = response.json()
                if data.get('success', True):
                    logger.info("‚úÖ Google Calendar API –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    return True
                else:
                    logger.error(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    return False
            except:
                logger.error(f"‚ùå API –≤–µ—Ä–Ω—É–ª –Ω–µ JSON –æ—Ç–≤–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Calendar API: {e}")
            return False
    
    async def get_meetings_starting_soon(self, minutes_ahead: int = 30) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å—Ç—Ä–µ—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–Ω—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ N –º–∏–Ω—É—Ç
        
        Args:
            minutes_ahead: –ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –≤—Å—Ç—Ä–µ—á–∏ –∏—Å–∫–∞—Ç—å
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤—Å—Ç—Ä–µ—á, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—É—Ç—Å—è
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º aiohttp –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    self.api_url, 
                    params={'hours': 2},  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞ 2 —á–∞—Å–∞ –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                    timeout=aiohttp.ClientTimeout(total=30),
                    allow_redirects=True  # –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã –¥–ª—è Google Apps Script
                ) as response:
                    response.raise_for_status()
                    data = await response.json()
            
            if not data.get('success', True):
                logger.error(f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {data.get('error')}")
                return []
            
            meetings_soon = []
            now = datetime.now(timezone.utc)  # Use UTC timezone
            threshold = now + timedelta(minutes=minutes_ahead)
            
            for event in data.get('events', []):
                try:
                    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                    start_str = event.get('startTime', '')
                    if not start_str:
                        continue
                        
                    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
                    if start_str.endswith('Z'):
                        start_time = datetime.fromisoformat(start_str.replace('Z', '+00:00'))
                    else:
                        start_time = datetime.fromisoformat(start_str)
                        if start_time.tzinfo is None:
                            start_time = start_time.replace(tzinfo=timezone.utc)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –≤ –Ω–∞—à –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
                    time_until_seconds = (start_time - now).total_seconds()
                    time_until_minutes = time_until_seconds / 60
                    
                    # –í—Å—Ç—Ä–µ—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º –∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–∞—à–µ–≥–æ –æ–∫–Ω–∞
                    if 0 < time_until_minutes <= minutes_ahead:
                        event['minutes_until_start'] = int(time_until_minutes)
                        event['seconds_until_start'] = int(time_until_seconds)
                        meetings_soon.append(event)
                        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞ '{event.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}' —á–µ—Ä–µ–∑ {int(time_until_minutes)} –º–∏–Ω—É—Ç")
                        
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event}: {e}")
                    continue
            
            return meetings_soon
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á: {e}")
            return []
    
    async def get_previous_meeting_in_series(self, meeting_title: str) -> Optional[Dict]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤—Å—Ç—Ä–µ—á—É –∏–∑ —Ç–æ–π –∂–µ —Å–µ—Ä–∏–∏
        
        Args:
            meeting_title: –ù–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ—Ä–∏–∏
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤—Å—Ç—Ä–µ—á–∏ –∏–ª–∏ None
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
            series_name = self._extract_series_name(meeting_title)
            
            logger.info(f"–ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤—Å—Ç—Ä–µ—á—É –¥–ª—è —Å–µ—Ä–∏–∏: '{series_name}' –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è '{meeting_title}'")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Ä–∏–∏
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    self.api_url,
                    params={
                        'action': 'series',
                        'seriesName': series_name
                    },
                    timeout=aiohttp.ClientTimeout(total=30),
                    allow_redirects=True
                ) as response:
                    response.raise_for_status()
                    data = await response.json()
            
            if data.get('success', True) and data.get('lastMeeting'):
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –≤—Å—Ç—Ä–µ—á–∞: {data['lastMeeting'].get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                return data['lastMeeting']
            else:
                logger.warning(f"–ü—Ä–µ–¥—ã–¥—É—â–∞—è –≤—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Å–µ—Ä–∏–∏: {series_name}")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –æ–±—â–∏–π –ø–æ–∏—Å–∫
                return await self._fallback_search(meeting_title)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤—Å—Ç—Ä–µ—á–∏: {e}")
            return None
    
    async def _fallback_search(self, meeting_title: str) -> Optional[Dict]:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º—Å—è –≤—Å—Ç—Ä–µ—á–∞–º"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    self.api_url,
                    params={'action': 'recurring'},
                    timeout=aiohttp.ClientTimeout(total=30),
                    allow_redirects=True
                ) as response:
                    response.raise_for_status()
                    data = await response.json()
            
            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ —Å–µ—Ä–∏—è—Ö
            title_words = set(meeting_title.lower().split())
            
            for series_name, meetings in data.get('series', {}).items():
                series_words = set(series_name.lower().split())
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–ª–æ–≤ (—Å—Ö–æ–∂–µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π)
                if len(title_words & series_words) >= 1 and meetings:
                    logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –ø–æ—Ö–æ–∂–∞—è —Å–µ—Ä–∏—è: {series_name}")
                    return meetings[-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è –≤—Å—Ç—Ä–µ—á–∞ –≤ —Å–µ—Ä–∏–∏
            
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
            return None
    
    async def get_recurring_patterns(self) -> Dict[str, List]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –≤—Å—Ç—Ä–µ—á
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –≤—Å—Ç—Ä–µ—á
        """
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    self.api_url, 
                    params={'action': 'all'},
                    timeout=aiohttp.ClientTimeout(total=30),
                    allow_redirects=True
                ) as response:
                    response.raise_for_status()
                    data = await response.json()
            
            if data.get('success', True):
                patterns = data.get('patterns', {})
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: daily={len(patterns.get('daily', []))}, "
                          f"weekly={len(patterns.get('weekly', []))}")
                return patterns
            
            return {}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
            return {}
    
    def _extract_series_name(self, title: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏"""
        # –£–¥–∞–ª—è–µ–º –¥–∞—Ç—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        cleaned = re.sub(r'\d{1,2}[/-]\d{1,2}[/-]\d{2,4}', '', title)
        cleaned = re.sub(r'\d{4}[/-]\d{1,2}[/-]\d{1,2}', '', cleaned)
        
        # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–æ–≤/—Å–µ—Å—Å–∏–π
        cleaned = re.sub(r'#\d+', '', cleaned)
        cleaned = re.sub(r'‚Ññ\d+', '', cleaned)
        cleaned = re.sub(r'\b\d+\b', '', cleaned)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        cleaned = re.sub(r'\s+', ' ', cleaned)
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2-4 —Å–ª–æ–≤–∞ –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Ä–∏–∏
        words = cleaned.strip().split()[:4]
        series_name = ' '.join(words).strip()
        
        # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –±–µ—Ä–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ
        if len(series_name) < 3:
            words = title.split()[:3]
            series_name = ' '.join(words)
        
        return series_name
    
    async def get_upcoming_events(self, minutes_ahead: int = 30) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        
        Args:
            minutes_ahead: –ó–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤–ø–µ—Ä–µ–¥ –∏—Å–∫–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤—Å—Ç—Ä–µ—á
        """
        try:
            hours_ahead = max(2, int(minutes_ahead / 60))  # –ú–∏–Ω–∏–º—É–º 2 —á–∞—Å–∞
            
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    self.api_url, 
                    params={'hours': hours_ahead},
                    timeout=aiohttp.ClientTimeout(total=30),
                    allow_redirects=True
                ) as response:
                    response.raise_for_status()
                    data = await response.json()
            
            if not data.get('success', True):
                logger.error(f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {data.get('error')}")
                return []
            
            upcoming_events = []
            now = datetime.now(timezone.utc)
            
            for event in data.get('events', []):
                try:
                    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                    start_str = event.get('startTime', '')
                    if not start_str:
                        continue
                        
                    if start_str.endswith('Z'):
                        start_time = datetime.fromisoformat(start_str.replace('Z', '+00:00'))
                    else:
                        start_time = datetime.fromisoformat(start_str)
                        if start_time.tzinfo is None:
                            start_time = start_time.replace(tzinfo=timezone.utc)
                    
                    # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –±—É–¥—É—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                    time_until_seconds = (start_time - now).total_seconds()
                    time_until_minutes = time_until_seconds / 60
                    
                    if 0 < time_until_minutes <= minutes_ahead:
                        event['minutes_until_start'] = int(time_until_minutes)
                        event['seconds_until_start'] = int(time_until_seconds)
                        upcoming_events.append(event)
                        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∞—è –≤—Å—Ç—Ä–µ—á–∞ '{event.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}' —á–µ—Ä–µ–∑ {int(time_until_minutes)} –º–∏–Ω—É—Ç")
                        
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event}: {e}")
                    continue
            
            return upcoming_events
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤—Å—Ç—Ä–µ—á: {e}")
            return []

    async def test_api(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å API
        
        Returns:
            True –µ—Å–ª–∏ API —Ä–∞–±–æ—Ç–∞–µ—Ç, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    self.api_url, 
                    timeout=aiohttp.ClientTimeout(total=10),
                    allow_redirects=True
                ) as response:
                    response.raise_for_status()
                    data = await response.json()
                    return data.get('success', True)
                    
        except Exception as e:
            logger.error(f"–¢–µ—Å—Ç API –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            return False

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ
async def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(level=logging.INFO)
    
    # –°–æ–∑–¥–∞–π –∫–ª–∏–µ–Ω—Ç
    calendar = GoogleCalendarClient()
    
    # –ü—Ä–æ–≤–µ—Ä—å –≤—Å—Ç—Ä–µ—á–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –º–∏–Ω—É—Ç
    upcoming = await calendar.get_meetings_starting_soon(30)
    
    if upcoming:
        print(f"\nüîî –í—Å—Ç—Ä–µ—á–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –º–∏–Ω—É—Ç:")
        for meeting in upcoming:
            print(f"  - {meeting.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} —á–µ—Ä–µ–∑ {meeting['minutes_until_start']} –º–∏–Ω")
            
            # –ù–∞–π–¥–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤—Å—Ç—Ä–µ—á—É –∏–∑ —Å–µ—Ä–∏–∏
            previous = await calendar.get_previous_meeting_in_series(meeting['title'])
            if previous:
                print(f"    –ü—Ä–µ–¥—ã–¥—É—â–∞—è –≤—Å—Ç—Ä–µ—á–∞ –±—ã–ª–∞: {previous.get('date', previous.get('startTime', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))}")
            else:
                print(f"    –ü—Ä–µ–¥—ã–¥—É—â–∞—è –≤—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    else:
        print("–ù–µ—Ç –≤—Å—Ç—Ä–µ—á –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –º–∏–Ω—É—Ç")

if __name__ == "__main__":
    asyncio.run(main())